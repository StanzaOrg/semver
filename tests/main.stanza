#use-added-syntax(tests)
defpackage semver/tests:
  import core
  import semver

deftest empty-string-should-not-parse:
  #EXPECT(parse-semver("") == None())

deftest valid-semver-should-parse:
  #EXPECT(parse-semver("0.0.1") == One(SemanticVersion(0, 0, 1)))
  #EXPECT(parse-semver("0.0.1") == One(SemanticVersion(0, 0, 1)))
  #EXPECT(parse-semver("11.22.33") == One(SemanticVersion(11, 22, 33)))
  #EXPECT(parse-semver("11.22.33") == One(SemanticVersion(11, 22, 33)))

deftest invalid-semver-should-not-parse:
  #EXPECT(parse-semver("1.b.c") == None())
  #EXPECT(parse-semver("1.2.c") == None())
  #EXPECT(parse-semver("a.1.2") == None())
  #EXPECT(parse-semver("a.b.3") == None())
  #EXPECT(parse-semver("1a.2.3") == None())
  #EXPECT(parse-semver("1.2d.3") == None())
  #EXPECT(parse-semver("1.2.3f") == None())
  #EXPECT(parse-semver("1.2.3.") == None())
  #EXPECT(parse-semver("01.2.3") == None())
  #EXPECT(parse-semver("1.02.3") == None())
  #EXPECT(parse-semver("1.02.03") == None())

deftest nonzero-leading-component-match-should-be-compatible:
  #EXPECT(compatible?(SemanticVersion(1, 2, 3), SemanticVersion(1, 2, 3)))
  #EXPECT(compatible?(SemanticVersion(1, 2, 3), SemanticVersion(1, 2, 0)))
  #EXPECT(compatible?(SemanticVersion(1, 2, 3), SemanticVersion(1, 0, 0)))

  #EXPECT(compatible?(SemanticVersion(0, 2, 3), SemanticVersion(0, 2, 3)))
  #EXPECT(compatible?(SemanticVersion(0, 2, 3), SemanticVersion(0, 2, 0)))

  #EXPECT(compatible?(SemanticVersion(0, 0, 3), SemanticVersion(0, 0, 3)))

deftest nonzero-leading-component-mismatch-should-not-be-compatible:
  #EXPECT(not compatible?(SemanticVersion(1, 2, 3), SemanticVersion(2, 2, 3)))
  #EXPECT(not compatible?(SemanticVersion(0, 2, 3), SemanticVersion(0, 3, 3)))
  #EXPECT(not compatible?(SemanticVersion(0, 0, 3), SemanticVersion(0, 0, 4)))

deftest previous-version-should-be-lesser:
  #EXPECT(SemanticVersion(0, 0, 1) < SemanticVersion(0, 0, 2))
  #EXPECT(SemanticVersion(0, 0, 1) < SemanticVersion(0, 0, 9))
  #EXPECT(SemanticVersion(0, 0, 1) < SemanticVersion(0, 1, 0))
  #EXPECT(SemanticVersion(0, 0, 1) < SemanticVersion(1, 0, 0))

  #EXPECT(SemanticVersion(0, 1, 1) < SemanticVersion(0, 1, 2))
  #EXPECT(SemanticVersion(0, 1, 1) < SemanticVersion(0, 1, 9))
  #EXPECT(SemanticVersion(0, 1, 1) < SemanticVersion(0, 2, 0))
  #EXPECT(SemanticVersion(0, 1, 1) < SemanticVersion(1, 0, 0))

  #EXPECT(SemanticVersion(1, 1, 1) < SemanticVersion(1, 1, 2))
  #EXPECT(SemanticVersion(1, 1, 1) < SemanticVersion(1, 1, 9))
  #EXPECT(SemanticVersion(1, 1, 1) < SemanticVersion(1, 2, 0))
  #EXPECT(SemanticVersion(1, 1, 1) < SemanticVersion(2, 0, 0))

deftest newer-version-should-be-greater:
  #EXPECT(SemanticVersion(0, 0, 2) > SemanticVersion(0, 0, 1))
  #EXPECT(SemanticVersion(0, 0, 9) > SemanticVersion(0, 0, 1))
  #EXPECT(SemanticVersion(0, 1, 0) > SemanticVersion(0, 0, 1))
  #EXPECT(SemanticVersion(1, 0, 0) > SemanticVersion(0, 0, 1))

  #EXPECT(SemanticVersion(0, 1, 2) > SemanticVersion(0, 1, 1))
  #EXPECT(SemanticVersion(0, 1, 9) > SemanticVersion(0, 1, 1))
  #EXPECT(SemanticVersion(0, 2, 0) > SemanticVersion(0, 1, 1))
  #EXPECT(SemanticVersion(1, 0, 0) > SemanticVersion(0, 1, 1))

  #EXPECT(SemanticVersion(1, 1, 2) > SemanticVersion(1, 1, 1))
  #EXPECT(SemanticVersion(1, 1, 9) > SemanticVersion(1, 1, 1))
  #EXPECT(SemanticVersion(1, 2, 0) > SemanticVersion(1, 1, 1))
  #EXPECT(SemanticVersion(2, 0, 0) > SemanticVersion(1, 1, 1))

deftest same-version-should-be-equal:
  #EXPECT(SemanticVersion(0, 0, 1) == SemanticVersion(0, 0, 1))
  #EXPECT(SemanticVersion(0, 1, 1) == SemanticVersion(0, 1, 1))
  #EXPECT(SemanticVersion(1, 1, 1) == SemanticVersion(1, 1, 1))

deftest different-version-should-not-be-equal:
  #EXPECT(SemanticVersion(0, 0, 2) != SemanticVersion(0, 0, 1))
  #EXPECT(SemanticVersion(0, 2, 2) != SemanticVersion(0, 1, 1))
  #EXPECT(SemanticVersion(2, 2, 2) != SemanticVersion(1, 1, 1))

deftest should-print-separated-by-dots:
  #EXPECT(to-string(SemanticVersion(1, 2, 3)) == "1.2.3")
