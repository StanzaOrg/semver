defpackage semver:
  import core
  import maybe-utils

public defstruct SemanticVersion <: Printable & Equalable & Hashable & Comparable<SemanticVersion>:
  major: Int
  minor: Int
  patch: Int
with:
  hashable => true
  equalable => true

defn to-int? (s: String) -> Maybe<Int>:
  if s == "":
    None()
  ; Semver versions must not contain leading zeros
  else if length(s) > 1 and prefix?(s, "0"):
    None()
  else:
    core/to-int(s) $> to-maybe

public defn parse-semver (s: String) -> Maybe<SemanticVersion>:
  label<Maybe<SemanticVersion>> return:
    val components = to-tuple $ split(s, ".")
    defn component? (index: Int) -> Int:
      components[index] $> to-int? $> value-or-return{_, return}

    switch(length(components)):
      3: One(SemanticVersion(component?(0), component?(1), component?(2)))
      else: None()

defmethod print (o: OutputStream, v: SemanticVersion) -> False:
  print(o, "%~.%~.%~" % [major(v), minor(v), patch(v)])

defmethod compare (v1: SemanticVersion, v2: SemanticVersion) -> Int:
  label<Int> return:
    defn compare-return-nonzero (a: Int, b: Int):
      if compare(a, b) != 0:
        return(compare(a, b))

    compare-return-nonzero(major(v1), major(v2))
    compare-return-nonzero(minor(v1), minor(v2))
    return(compare(patch(v1), patch(v2)))

public defn compatible? (v1: SemanticVersion, v2: SemanticVersion) -> True|False:
  defn both-zero (a: Int, b: Int): (a == 0 and b == 0)

  if not both-zero(major(v1), major(v2)):
    major(v1) == major(v2)
  else if not both-zero(minor(v1), minor(v2)):
    minor(v1) == minor(v2)
  else:
    patch(v1) == patch(v2)
